var require=function(e,n){var r=require.resolve(e,n||"/"),t=require.modules[r];if(!t)throw new Error("Failed to resolve module "+e+", tried "+r);var i=t._cached?t._cached:t();return i};require.paths=[],require.modules={},require.extensions=[".js",".coffee"],require._core={assert:!0,events:!0,fs:!0,path:!0,vm:!0},require.resolve=function(){return function(e,n){function r(e){if(require.modules[e])return e;for(var n=0;n<require.extensions.length;n++){var r=require.extensions[n];if(require.modules[e+r])return e+r}}function t(e){e=e.replace(/\/+$/,"");var n=e+"/package.json";if(require.modules[n]){var t=require.modules[n](),i=t.browserify;if("object"==typeof i&&i.main){var s=r(o.resolve(e,i.main));if(s)return s}else if("string"==typeof i){var s=r(o.resolve(e,i));if(s)return s}else if(t.main){var s=r(o.resolve(e,t.main));if(s)return s}}return r(e+"/index")}function i(e,n){for(var i=s(n),o=0;o<i.length;o++){var a=i[o],u=r(a+"/"+e);if(u)return u;var l=t(a+"/"+e);if(l)return l}var u=r(e);return u?u:void 0}function s(e){var n;n="/"===e?[""]:o.normalize(e).split("/");for(var r=[],t=n.length-1;t>=0;t--)if("node_modules"!==n[t]){var i=n.slice(0,t+1).join("/")+"/node_modules";r.push(i)}return r}if(n||(n="/"),require._core[e])return e;var o=require.modules.path();n=o.resolve("/",n);var a=n||"/";if(e.match(/^(?:\.\.?\/|\/)/)){var u=r(o.resolve(a,e))||t(o.resolve(a,e));if(u)return u}var l=i(e,a);if(l)return l;throw new Error("Cannot find module '"+e+"'")}}(),require.alias=function(e,n){var r=require.modules.path(),t=null;try{t=require.resolve(e+"/package.json","/")}catch(i){t=require.resolve(e,"/")}for(var s=r.dirname(t),o=(Object.keys||function(e){var n=[];for(var r in e)n.push(r);return n})(require.modules),a=0;a<o.length;a++){var u=o[a];if(u.slice(0,s.length+1)===s+"/"){var l=u.slice(s.length);require.modules[n+l]=require.modules[s+l]}else u===s&&(require.modules[n]=require.modules[s])}},require.define=function(e,n){var r=require._core[e]?"":require.modules.path().dirname(e),t=function(e){return require(e,r)};t.resolve=function(e){return require.resolve(e,r)},t.modules=require.modules,t.define=require.define;var i={exports:{}};require.modules[e]=function(){return require.modules[e]._cached=i.exports,n.call(i.exports,t,i,i.exports,r,e),require.modules[e]._cached=i.exports,i.exports}},"undefined"==typeof process&&(process={}),process.nextTick||(process.nextTick=function(){var e=[],n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;return n&&window.addEventListener("message",function(n){if(n.source===window&&"browserify-tick"===n.data&&(n.stopPropagation(),e.length>0)){var r=e.shift();r()}},!0),function(r){n?(e.push(r),window.postMessage("browserify-tick","*")):setTimeout(r,0)}}()),process.title||(process.title="browser"),process.binding||(process.binding=function(e){if("evals"===e)return require("vm");throw new Error("No such module")}),process.cwd||(process.cwd=function(){return"."}),process.env||(process.env={}),process.argv||(process.argv=[]),require.define("path",Function(["require","module","exports","__dirname","__filename"],"function filter (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (fn(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length; i >= 0; i--) {\n    var last = parts[i];\n    if (last == '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Regex to split a filename into [*, dir, basename, ext]\n// posix version\nvar splitPathRe = /^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\nvar resolvedPath = '',\n    resolvedAbsolute = false;\n\nfor (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {\n  var path = (i >= 0)\n      ? arguments[i]\n      : process.cwd();\n\n  // Skip empty and invalid entries\n  if (typeof path !== 'string' || !path) {\n    continue;\n  }\n\n  resolvedPath = path + '/' + resolvedPath;\n  resolvedAbsolute = path.charAt(0) === '/';\n}\n\n// At this point the path should be resolved to a full absolute path, but\n// handle relative paths to be safe (might happen when process.cwd() fails)\n\n// Normalize the path\nresolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\nvar isAbsolute = path.charAt(0) === '/',\n    trailingSlash = path.slice(-1) === '/';\n\n// Normalize the path\npath = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n  \n  return (isAbsolute ? '/' : '') + path;\n};\n\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    return p && typeof p === 'string';\n  }).join('/'));\n};\n\n\nexports.dirname = function(path) {\n  var dir = splitPathRe.exec(path)[1] || '';\n  var isWindows = false;\n  if (!dir) {\n    // No dirname\n    return '.';\n  } else if (dir.length === 1 ||\n      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {\n    // It is just a slash or a drive letter with a slash\n    return dir;\n  } else {\n    // It is a full dirname, strip trailing slash\n    return dir.substring(0, dir.length - 1);\n  }\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPathRe.exec(path)[2] || '';\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPathRe.exec(path)[3] || '';\n};\n\n//@ sourceURL=path")),require.define("timers",Function(["require","module","exports","__dirname","__filename"],'module.exports = require("timers-browserify")\n//@ sourceURL=timers')),require.define("/node_modules/timers-browserify/package.json",Function(["require","module","exports","__dirname","__filename"],'module.exports = {"main":"main.js"}\n//@ sourceURL=/node_modules/timers-browserify/package.json')),require.define("/node_modules/timers-browserify/main.js",Function(["require","module","exports","__dirname","__filename"],"// DOM APIs, for completeness\n\nexports.setTimeout = setTimeout;\nexports.clearTimeout = clearTimeout;\nexports.setInterval = setInterval;\nexports.clearInterval = clearInterval;\n\n// TODO: Change to more effiecient list approach used in Node.js\n// For now, we just implement the APIs using the primitives above.\n\nexports.enroll = function(item, delay) {\n  item._timeoutID = setTimeout(item._onTimeout, delay);\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._timeoutID);\n};\n\nexports.active = function(item) {\n  // our naive impl doesn't care (correctness is still preserved)\n};\n\n//@ sourceURL=/node_modules/timers-browserify/main.js")),require.define("/main.js",Function(["require","module","exports","__dirname","__filename"],"var timers = require('timers');\n\nvar obj = {\n  _onTimeout: function() {\n    console.log('Timer ran for: ' + (new Date().getTime() - obj.now) + ' ms');\n  },\n  start: function() {\n    console.log('Timer should run for 100 ms');\n    this.now = new Date().getTime();\n    timers.enroll(this, 100);\n  }\n};\n\nobj.start();\n\n//@ sourceURL=/main.js")),require("/main.js");